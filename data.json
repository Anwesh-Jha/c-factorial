{
    "collections": [
        {
            "name": "File Handling",
            "snippets": [
                {
                    "title": "Write a C program to write a character and display it using fgetc() and fputc() functions.",
                    "code": "#include<stdio.h>\nint main(){\n    FILE *fp;\n    char ch, c;\n    fp = fopen(\"./filechar.txt\", \"w+\");\n    printf(\"Enter a character: \");\n    scanf(\"%s\", &ch);\n    fputc(ch, fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    c = fgetc(fp);\n    printf(\"The entered character is %c\", c);\n    printf(\"\\nProgram executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/1_output.PNG",
                    "fileImage": "./assets/filehandling_ii/1_file.PNG"
                },
                {
                    "title": "Write a C program to write a number and display it using getw() and putw() functions.",
                    "code": "#include<stdio.h>\n\nint main(){\n    FILE *fp;\n    int n,n1;\n    fp = fopen(\"./fileint.txt\",\"w+\");\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    putw(n,fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    n1 = getw(fp);\n    printf(\"The entered number is %d\\n\",n1);\n    printf(\"Program executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/2_output.PNG",
                    "fileImage": "./assets/filehandling_ii/2_file.PNG"
                }
            ]
        },
        {
            "name": "Dynamic Memory Allocation",
            "snippets": [
                {
                    "title": "Write a C program to demonstrate the use of malloc() and free().",
                    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(){\n    int *ptr;\n    ptr = (int*)malloc(5 * sizeof(int));\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    printf(\"Stored values: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}",
                    "outputImage": "./assets/malloc_output.PNG",
                    "fileImage": "./assets/malloc_file.PNG"
                }
            ]
        },
        {
            "name":"C programmin",
            "snippets":[
                {
                    "title":"What is dereferencing operator? Write a program to swap two numbers using pointer.", 
                    "code":"The dereferencing operator is * in C/C++. It is used to access the value at the address the pointer is pointing to. When you dereference a pointer, you get the value stored at the memory address that the pointer holds.\n\nTo swap two numbers using pointers, you'll need to:\n\n1. Declare two integer variables.\n2. Use pointers to hold their addresses.\n3. Dereference the pointers to access and swap the values.\n#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;  // Dereference the pointer to get the value\n    *a = *b;        // Dereference and assign the value of b to a\n    *b = temp;      // Assign the temp value to b\n}\n\nint main() {\n    int x, y;\n\n    // Input the values\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &x, &y);\n\n    // Swap using pointers\n    swap(&x, &y);\n\n    // Output the swapped values\n    printf(\"After swapping: x = %d, y = %d\\n\", x, y);\n\n    return 0;\n}",
                    "outpuImage":"",
                    "fileImage":"",
                }
            ]
        }
    ]
}
